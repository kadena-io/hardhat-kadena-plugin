{"version":3,"file":"deployContracts.js","sourceRoot":"","sources":["../src/deployContracts.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeployUsingCreate2 } from './type';\nimport { Signer, Overrides, BytesLike } from 'ethers';\nimport { getNetworkStem } from '@kadena/hardhat-chainweb';\n\nimport hre from 'hardhat';\n\nimport {\n  create2Artifacts,\n  getCreate2FactoryAddress,\n} from './deployCreate2Factory';\n\nconst networkStem = getNetworkStem(hre.config.defaultChainweb);\n\nconst { ethers, chainweb } = hre;\n\n/**\n * Checks if a contract is deployed at the specified address.\n *\n * @param address - The address to check for contract deployment\n * @returns A promise that resolves to true if a contract exists at the address, false otherwise\n */\nfunction isContractDeployed(address: string): Promise<boolean> {\n  return ethers.provider.getCode(address).then((code) => code !== '0x');\n}\n\n/**\n * Creates salt values for CREATE2 deployment with optional sender binding.\n *\n * @param sender - The address of the deploying account\n * @param userSalt - The user-provided salt string\n * @returns A tuple containing [saltBytes for ethers.getCreate2Address, userSaltBytes32 for contract call]\n */\nfunction convertToByte(userSalt: string): BytesLike {\n  const userSaltBytes32 = ethers.id(userSalt);\n  return ethers.getBytes(userSaltBytes32);\n}\n\n/**\n * Deploys a contract using standard CREATE2 functionality.\n *\n * @param contractBytecode - The compiled bytecode of the contract to deploy\n * @param signer - The signer that will deploy the contract\n * @param overrides - Optional transaction overrides for the deployment\n * @param salt - The salt to use for the CREATE2 deployment\n * @param create2Factory - Optional custom CREATE2 factory address.\n * Must implement:\n * - function deploy(bytes memory bytecode, bytes32 salt) public payable returns (address)\n * - function computeAddress(bytes memory bytecode, bytes32 salt) public view returns (address)\n * @returns The deployed contract address\n **/\n\nasync function deployContract({\n  contractBytecode,\n  signer,\n  overrides,\n  salt,\n  create2Factory,\n}: {\n  contractBytecode: string;\n  signer: Signer;\n  overrides: Overrides | undefined;\n  salt: string;\n  create2Factory?: string;\n}) {\n  const create2FactoryAddress =\n    create2Factory ?? (await getCreate2FactoryAddress());\n\n  const CREATE2Factory = await hre.ethers.getContractFactory(\n    create2Artifacts.abi,\n    create2Artifacts.bin,\n    signer,\n  );\n\n  const create2 = CREATE2Factory.attach(create2FactoryAddress);\n\n  // Standard CREATE2 - don't include sender in salt\n  const saltBytes = convertToByte(salt);\n\n  const bytecodeHash = ethers.keccak256(contractBytecode);\n\n  const predictedAddress = ethers.getCreate2Address(\n    create2FactoryAddress,\n    saltBytes,\n    bytecodeHash,\n  );\n\n  const computedAddress = await create2.computeAddress(\n    contractBytecode,\n    saltBytes,\n  );\n\n  if (computedAddress !== predictedAddress) {\n    console.log(\n      `ADDRESS MISMATCH: computed address (${computedAddress}) != predicted address (${predictedAddress})`,\n    );\n    throw new Error(\n      `ADDRESS MISMATCH: computed address (${computedAddress}) != predicted address (${predictedAddress})`,\n    );\n  }\n\n  if (await isContractDeployed(predictedAddress)) {\n    console.log(\n      `Contract already deployed at ${predictedAddress}. Skipping deployment.`,\n    );\n    return predictedAddress;\n  }\n\n  // Deploy using CREATE2,\n  const tx = await create2.deploy(contractBytecode, saltBytes, overrides || {});\n  await tx.wait();\n\n  if (!(await isContractDeployed(predictedAddress))) {\n    console.log(\n      `CREATE2 failed:  No contract at predicted address ${predictedAddress}`,\n    );\n    throw new Error(\n      `CREATE2 failed:  No contract at predicted address ${predictedAddress}`,\n    );\n  }\n  return predictedAddress;\n}\n\n/**\n * Deploy a contract on all configured chainweb chains using CREATE2.\n * This ensures the contract is deployed to the same address on all chains.\n *\n * @param name - The name of the contract to deploy\n * @param signer - Optional signer for deployment (defaults to first account)\n * @param factoryOptions - Optional additional options for the contract factory\n * @param constructorArgs - Arguments to pass to the contract constructor\n * @param overrides - Optional transaction overrides for the deployment\n * @param salt - The salt to use for the CREATE2 deployment\n * @param create2Factory - Optional custom CREATE2 factory address.\n * Must implement:\n * - function deploy(bytes memory bytecode, bytes32 salt) public payable returns (address)\n * - function computeAddress(bytes memory bytecode, bytes32 salt) public view returns (address)\n * @returns Object containing deployment information for each chain\n */\nexport const deployUsingCreate2: DeployUsingCreate2 = async ({\n  name,\n  signer,\n  factoryOptions,\n  constructorArgs = [],\n  overrides,\n  salt,\n  create2Factory,\n}) => {\n  const deployments = await chainweb.runOverChains(async (cwId) => {\n    try {\n      // Get chain-specific signers (this is the key part)\n      const signers = await ethers.getSigners();\n\n      // Determine the appropriate signer for this chain\n      let contractDeployer;\n\n      // First check if custom signer was provided\n      if (signer) {\n        const signerAddress = await signer.getAddress();\n        contractDeployer = signers.find(\n          (account) => account.address === signerAddress,\n        );\n        if (!contractDeployer) {\n          throw new Error(\n            `Can't find signer with address ${signerAddress} on chain ${cwId}`,\n          );\n        }\n      }\n      // Then check factory options signer\n      else if (factoryOptions?.signer) {\n        const optionsSignerAddress = await factoryOptions.signer.getAddress();\n        contractDeployer = signers.find(\n          (account) => account.address === optionsSignerAddress,\n        );\n        if (!contractDeployer) {\n          throw new Error(\n            `Can't find factory options signer with address ${optionsSignerAddress} on chain ${cwId}`,\n          );\n        }\n      }\n      // Finally use default\n      else {\n        contractDeployer = signers[0];\n      }\n\n      const deployerAddress = await contractDeployer.getAddress();\n      console.log(\n        `Deploying contract deterministically with signer: ${deployerAddress} on chain ${cwId}`,\n      );\n      const factory = await ethers.getContractFactory(name, {\n        signer: contractDeployer,\n        ...factoryOptions,\n      });\n      const transaction = await factory.getDeployTransaction(\n        ...(overrides ? [...constructorArgs, overrides] : constructorArgs),\n      );\n\n      // Prepare the bytecode of the contract to deploy\n      const contractBytecode = transaction.data;\n\n      // Choose create2 deployment function based on bindToSender flag\n      const contractAddress = await deployContract({\n        contractBytecode,\n        signer: contractDeployer,\n        overrides,\n        salt,\n        create2Factory,\n      });\n\n      const contract = factory.attach(contractAddress);\n\n      // Store deployment info in both formats\n      // Note: 'chain' and 'network.chainId' represent the Chainweb chain ID (0, 1, etc.)\n      // not the EVM chainId. The EVM chainId can be accessed via hre.network.config.chainId\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        contract: contract as any,\n        address: contractAddress,\n        chain: cwId,\n        deployer: deployerAddress,\n        network: {\n          chainId: cwId,\n          name: `${networkStem}${cwId}`,\n        },\n      };\n    } catch (error) {\n      console.error(\n        `Failed to deploy contract to chainweb chain ${cwId}:`,\n        error,\n      );\n      return null;\n    }\n  });\n\n  return {\n    deployments: deployments.filter((d) => d !== null),\n  };\n};\n"]}