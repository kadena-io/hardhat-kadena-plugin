{"version":3,"file":"deployCreate2Factory.js","sourceRoot":"","sources":["../src/deployCreate2Factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getCreateAddress,\n  keccak256,\n  Signer,\n  toUtf8Bytes,\n  Wallet,\n  TransactionRequest,\n} from 'ethers';\n\nimport create2Artifact from '../build/create2-factory/combined.json';\nimport hre, { chainweb, ethers } from 'hardhat';\nimport { getNetworkStem } from '@kadena/hardhat-chainweb';\nimport { Create2Helpers } from './type';\n\nconst networkStem = getNetworkStem(hre.config.defaultChainweb);\n\nfunction isContractDeployed(address: string): Promise<boolean> {\n  return ethers.provider.getCode(address).then((code) => code !== '0x');\n}\n\nexport const create2Artifacts =\n  create2Artifact.contracts['contracts/Create2Factory.sol:Create2Factory'];\n\nexport const getCreate2FactoryAddress: Create2Helpers['getCreate2FactoryAddress'] =\n  async ({ signer, version = BigInt(1) } = {}) => {\n    // Get default signer if none provided\n    const signers = await ethers.getSigners();\n    const masterDeployer = signer || signers[0];\n\n    // Derive the secondary key directly with version parameter\n    const secondaryKey = await deriveSecondaryKey(masterDeployer, version);\n\n    // Calculate factory address\n    const factoryAddress = getCreateAddress({\n      from: secondaryKey.publicKey,\n      nonce: 0,\n    });\n\n    return factoryAddress;\n  };\n\nexport async function deriveSecondaryKey(\n  signer: Signer,\n  version: number | bigint = BigInt(1),\n) {\n  const message = `DeployerKey:v1:create2:${version}`;\n  const signature = await signer.signMessage(message);\n\n  // Combine signature and label to get deterministic entropy\n  const hash = keccak256(toUtf8Bytes(signature));\n\n  // Use first 32 bytes (64 hex chars + '0x') as the private key\n  const derivedPrivateKey = '0x' + hash.slice(2, 66);\n  const wallet: Wallet = new Wallet(derivedPrivateKey, signer.provider);\n\n  console.log(\n    `Derived secondary key for create2 factory version ${version}: ${derivedPrivateKey}`,\n  );\n\n  return {\n    publicKey: await wallet.getAddress(),\n    privateKey: derivedPrivateKey,\n  };\n}\n\nasync function fundAccount(sender: Signer, receiver: Signer, amount: bigint) {\n  const receiverAddress = await receiver.getAddress();\n\n  const tx = await sender.sendTransaction({\n    to: receiverAddress,\n    value: amount,\n  });\n  await tx.wait();\n\n  const receiverBalance = await ethers.provider.getBalance(receiverAddress);\n  if (receiverBalance < amount) {\n    throw new Error(\n      `Funding deployer failed. Receiver balance: ${receiverBalance} is less than funding amount: ${amount}`,\n    );\n  }\n}\n\nexport const deployCreate2Factory: Create2Helpers['deployCreate2Factory'] =\n  async ({ signer, version = BigInt(1) } = {}) => {\n    let secondaryPrivateKey: string | undefined = undefined;\n\n    const getSecondaryWallet = async (signer: Signer) => {\n      if (secondaryPrivateKey) {\n        return new Wallet(secondaryPrivateKey, ethers.provider);\n      }\n      secondaryPrivateKey = (await deriveSecondaryKey(signer, version))\n        .privateKey;\n\n      return new Wallet(secondaryPrivateKey, ethers.provider);\n    };\n\n    const result = await chainweb.runOverChains(async (cwId) => {\n      const signers = await ethers.getSigners();\n\n      let masterDeployer;\n      if (!signer) {\n        masterDeployer = signers[0];\n      } else {\n        // Get the address of the passed-in signer\n        const signerAddress = await signer.getAddress();\n\n        // Find the matching signer from the current chain's signers\n        masterDeployer = signers.find(\n          (account) => account.address === signerAddress,\n        );\n\n        if (!masterDeployer) {\n          throw new Error(`Can't find account with address ${signerAddress}`);\n        }\n      }\n\n      console.log('masterDeployer in deployCreate2Factory', masterDeployer);\n      if (masterDeployer) {\n        const address = await masterDeployer.getAddress();\n        console.log('masterDeployer address in deployCreate2Factory', address);\n        const balance = await ethers.provider.getBalance(address);\n        console.log(\n          'masterDeployer balance in deployCreate2Factory',\n          ethers.formatEther(balance),\n          'ETH',\n        );\n      }\n\n      const secondaryKey = await getSecondaryWallet(masterDeployer);\n      const secondaryKeyAddress = await secondaryKey.getAddress();\n\n      const create2FactoryAddress = ethers.getCreateAddress({\n        from: secondaryKey.address,\n        nonce: 0,\n      });\n\n      const isDeployed = await isContractDeployed(create2FactoryAddress);\n\n      if (isDeployed) {\n        const Factory = await hre.ethers.getContractFactory(\n          create2Artifacts.abi,\n          create2Artifacts.bin,\n        );\n        const create2 = Factory.attach(create2FactoryAddress);\n\n        console.log(\n          `The create2 factory address ${create2FactoryAddress} is already deployed on chain ${cwId}`,\n        );\n\n        return {\n          contract: create2,\n          address: create2FactoryAddress,\n          chain: cwId,\n          deployer: secondaryKeyAddress,\n          network: {\n            chainId: cwId,\n            name: `${networkStem}${cwId}`,\n          },\n        };\n      }\n\n      const nonce =\n        await ethers.provider.getTransactionCount(secondaryKeyAddress);\n\n      if (nonce > 0) {\n        throw new Error(\n          `This derived deployer address ${secondaryKeyAddress} has already been used for another type of transaction. You need a new address to deploy a create2 factory.\n          Please use a different signer or version.`,\n        );\n      }\n\n      console.log(\n        `The create2 factory contract will be deployed to address: ${create2FactoryAddress} with deployer address: ${secondaryKeyAddress}`,\n      );\n\n      const balance = await ethers.provider.getBalance(secondaryKeyAddress);\n\n      const CREATE2Factory = await hre.ethers.getContractFactory(\n        create2Artifact.contracts['contracts/Create2Factory.sol:Create2Factory']\n          .abi,\n        create2Artifact.contracts['contracts/Create2Factory.sol:Create2Factory']\n          .bin,\n        secondaryKey,\n      );\n\n      // Get detailed fee data\n      const tx = await CREATE2Factory.getDeployTransaction();\n      const gasLimit = await ethers.provider.estimateGas(tx);\n      const feeData = await ethers.provider.getFeeData();\n\n      let requiredEther: bigint;\n      let deployOptions: TransactionRequest;\n\n      // Check if we can get proper EIP-1559 fee data\n      if (gasLimit && feeData.maxFeePerGas && feeData.maxPriorityFeePerGas) {\n        // Use EIP-1559 fee structure\n        const maxFeePerGas = feeData.maxFeePerGas;\n\n        // Calculate required funding with 20% buffer (base fee can change between blocks)\n        requiredEther = (maxFeePerGas * gasLimit * BigInt(120)) / BigInt(100);\n\n        deployOptions = {\n          gasLimit,\n          maxFeePerGas: feeData.maxFeePerGas,\n          maxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n        };\n\n        console.log('Using EIP-1559 fee model');\n      } else if (gasLimit && feeData.gasPrice) {\n        // Fallback to legacy fee structure\n        requiredEther =\n          (feeData.gasPrice * gasLimit * BigInt(120)) / BigInt(100);\n\n        deployOptions = {\n          gasLimit,\n          gasPrice: feeData.gasPrice,\n        };\n\n        console.warn(\n          'Network returned legacy fee data instead of EIP-1559. Using legacy fee model.',\n        );\n      } else {\n        // Something failed in estimation, use benchmark data\n        console.warn(\n          'Fee data unavailable. Using fallback values from benchmark.',\n        );\n\n        // Use benchmark-based values (266,268 gas with buffer)\n        const benchmarkGasLimit = BigInt(300000); // Rounded up from 266,268\n        deployOptions = {\n          gasLimit: benchmarkGasLimit,\n        };\n\n        // 0.008 KDA (slightly higher than benchmarked 0.00798804)\n        requiredEther = ethers.parseEther('0.008');\n\n        console.warn(\n          `Using fallback gas limit of ${benchmarkGasLimit} and funding amount of ${ethers.formatEther(requiredEther)} KDA`,\n        );\n      }\n\n      if (balance >= requiredEther) {\n        console.log(\n          'Existing balance:',\n          ethers.formatEther(balance),\n          'KDA',\n          '(sufficient for deployment)',\n        );\n      } else {\n        // Calculate how much additional funding is needed\n        const additionalFunding = requiredEther - balance;\n        console.log(\n          `Current balance: ${ethers.formatEther(balance)} KDA, required: ${ethers.formatEther(requiredEther)} KDA`,\n        );\n        console.log(\n          `FUNDING create2 factory derived deployer with ${ethers.formatEther(additionalFunding)} KDA`,\n        );\n\n        await fundAccount(masterDeployer, secondaryKey, additionalFunding);\n      }\n\n      // Use the appropriate gas options for deployment\n      const contract = await CREATE2Factory.deploy(deployOptions);\n\n      const deploymentTx = contract.deploymentTransaction();\n      if (!deploymentTx) {\n        throw new Error('Create2 factory deployment transaction failed');\n      }\n      await deploymentTx.wait();\n\n      if (create2FactoryAddress !== (await contract.getAddress())) {\n        throw new Error('Create2 factory address mismatch');\n      }\n\n      console.log(\n        `Create2 factory deployed at ${create2FactoryAddress} on chain ${cwId}`,\n      );\n\n      return {\n        contract: contract,\n        address: create2FactoryAddress,\n        chain: cwId,\n        deployer: secondaryKeyAddress,\n        network: {\n          chainId: cwId,\n          name: `${networkStem}${cwId}`,\n        },\n      };\n    });\n    if (result.length === 0) {\n      throw new Error('No result from deployCreate2Factory');\n    }\n    // Clear the private key from memory when done\n    secondaryPrivateKey = undefined;\n\n    return [result[0].address, result] as const;\n  };\n"]}